#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <locale.h>		//	Подключение библиотек

typedef struct Segment{		//	Оъявление структуры Segment
	float A[2];		//	Массив - точка A[0] - x1, A[1] - y1
	float B[2];		//	Массив - точка B[0] - x2, B[1] - y2
} Segment;

int errMess() {		//	Ф-ция для вывода сообщения об ошибке
	printf("Некорректное значение...\n");
	return 0;
}

float segmentLen(Segment* s, int num) {	//	а) - Ф-ция для вычисления длины отрезка
	return sqrt(pow(s[num].B[0] - s[num].A[0], 2) + pow(s[num].B[1] - s[num].A[1], 2));		//	Ф-ция возвращает длину отрезка
}

int segmentCoeff(Segment* s, int snum, float* a, float* b, float* c) {	//	б) - Ф-ция для вычисления коэфф. канонического уравн. прямой содерж. отрезок
	*a = s[snum].B[1] - s[snum].A[1];	//	Коэфф. A
	*b = (s[snum].B[0] - s[snum].A[0]) * -1;	//	Коэфф. B
	*c = (*a * s[snum].A[0] + *b * s[snum].A[1]) * -1;	//	Коэфф. C
	return 0;	//	Завершение ф-ции
}

float distanseToSegment(Segment* s, float x, float y, int snum) {		//	в) - Ф-ция для вычисления расстояния от точки до прямой содерж. отрезок
	float A, B, C;
	segmentCoeff(s, snum, &A, &B, &C);	//	Вызов ф-ции для вычисления коэфф. канон. уравнения
	return fabs(A * x + B * y + C) / (sqrt((A * A) + (B * B)));		//	Ф-ция возвращает расстояние от точки до прямой
}

int parallSegments(Segment* s, int num1, int num2) {		//	д) - Ф-ция для проверки параллельности отрезков
	float A1, B1, C1, A2, B2, C2;
	segmentCoeff(s, num1, &A1, &B1, &C1);	//	Вызов ф-ции для вычисления коэфф. канон. уравнения
	segmentCoeff(s, num2, &A2, &B2, &C2);	//	Вызов ф-ции для вычисления коэфф. канон. уравнения
	if (!A1 && !A2)		//	Если коэфф. A1 и A2 = 0
		return 1;	//	Ф-ция возвращает 1
	if (!B1 && !B2)		//	Если коэфф. B1 и B2 = 0
		return 1;	//	Ф-ция возвращает 1
	float la = A1 / A2;
	float lb = B1 / B2;
	if (la == lb && C2 != la * C1)	//	Если коэфф A и B имеют общий корень, но C нет
		return 1;	//	Ф-ция возвращает 1
	else	//	Иначе
		return 0;	//	Ф-ция возвращает 0
}

float Vektor(float ax, float ay, float bx, float by) {	//	Ф-ция для вычисления направляющего вектора
	if (ay > bx) {	//	Проверка правильной постановки точки при вычислении и перестановка местами
		float temp = ay;
		ay = bx;
		bx = temp;
	}
	if (ax > by) {
		float temp = ax;
		ax = by;
		by = temp;
	}
	return ax * by - ay * bx;	//	Ф-ция возвращает одно из значений вектора 
}

 int crossSegments(Segment* s, int n1, int n2) {		//	г)	Ф-ция для проверки факта пересечения отрезков
	 if (parallSegments(s, n1, n2))	//	Вызов ф-ции для проверки параллельности отрезков
		 return 0;	//	Ф-ция возвращает 0
	 float v1 = Vektor(s[n2].B[0] - s[n2].A[0], s[n2].B[1] - s[n2].A[1], s[n1].A[0] - s[n2].A[0], s[n1].A[1] - s[n2].A[1]);
	 float v2 = Vektor(s[n2].B[0] - s[n2].A[0], s[n2].B[1] - s[n2].A[1], s[n1].B[0] - s[n2].A[0], s[n1].B[1] - s[n2].A[1]);
	 float v3 = Vektor(s[n1].B[0] - s[n1].A[0], s[n1].B[1] - s[n1].A[1], s[n2].A[0] - s[n1].A[0], s[n2].A[1] - s[n1].A[1]);
	 float v4 = Vektor(s[n1].B[0] - s[n1].A[0], s[n1].B[1] - s[n1].A[1], s[n2].B[1] - s[n1].A[0], s[n2].B[1] - s[n1].A[1]);	//	Вызов ф-ции для вычисления вектора и присваивание полученного значения
	 if (v1 * v2 <= 0 && v3 * v4 <= 0)	//	Если произведение векторов (v1 v2) и (v3 v4) меньше или равно 0 
		 return 1;	//	Ф-ция возвращает 1	
	 else
		 return 0;	//	Ф-ция возвращает 0
}

 float segmentsAngle(Segment* s, int num1, int num2) {		//	е) - Ф-ция для вычисления угла между отрезками
	 float A1, B1, A2, B2, C;
	 segmentCoeff(s, num1, &A1,&B1, &C);	//	Вызов ф-ции для вычисления коэфф. канон. уравнения
	 segmentCoeff(s, num2, &A2, &B2, &C);	//	Вызов ф-ции для вычисления коэфф. канон. уравнения
	 float z = (A1 * -A2) + (B1 * -B2);
	 if (z == 0)
		 return 0;
	 return 180 - fabs(atan(((A1 * B2) - (A2 * B1)) / z) * 180 / 3.141592);	//	Ф-ция возвращает значение угла между отрезками
 }

int inputSegment(Segment* s, int N, int* num) {	//	Ф-ция для добавления отрезков
	if (*num < N) {	//	Если кол-во отрезков меньше размера стркутуры
		printf("* * * * * Добавление * * * * *\n");
		printf("Введите координаты первой точки:\nX1 = ");
		scanf("%f", &s[*num].A[0]);
		printf("Y1 = ");
		scanf("%f", &s[*num].A[1]);
		printf("Введите координаты второй точки\nX2 = ");
		scanf("%f", &s[*num].B[0]);
		printf("Y2 = ");
		scanf("%f", &s[*num].B[1]);
		printf("+  +  +  +  +  Добавлено  +  +  +  +  +\n");
		*num += 1;
	}
	return 0;	//	Завершение ф-ции
}

int delSegment(Segment* s, int* num) {	//	Ф-ция для удаления отрезков
	int num_del;
	printf("| * * * * * Удаление * * * * * |\n");
	while (1) {
		printf("Номер строки для удаления:\n");
		printf("| 0 - отмена | >> ");
		scanf("%d", &num_del);		//	Ввод номера строки для удаления
		printf("\n");
		if (num_del == 0)	//	Если номер строки равен 0
			return 0;	//	Выход из ф-ции для удаления
		if (*num > 0) {
			if (num_del > 0 && num_del <= *num) {
				*num -= 1;	//	Уменьшение номера элемента структуры
				for (int i = num_del - 1; i < *num; i++)
					s[i] = s[i + 1];
				printf("| - - - - - Удалено - - - - - |\n\n");
				break;
			}
			else
				errMess();	//	Вызов вывода ошибки
		}
		else
			errMess();	//	Вызов вывода ошибки
	}
	return 0;
}

int printTable(Segment* s, int num) {	//	Ф-ция для вывода таблицы
	printf("№:	Точка A(x, y):\t\tТочка B(x, y):\n");
	printf("_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n");
	for (int i = 0; i < num; i++)
		printf("%d   (%f | %f)\t(%f | %f)\n", i + 1, s[i].A[0], s[i].A[1], s[i].B[0], s[i].B[1]);
	printf("_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n");
	return 0;	//	Завершение ф-ции
}

int search1(Segment* s, int num) {	//	Ф-ция для поиска кол-ва отрезков, образующих с текущим угол не менее G градусов
	if (num > 1) {	//	Если кол-во отрезков > 1
		float len = 0, maxlen = 0;
		int cross = 0, maxcross = 0, res = 0, K;
		printf("Введите минимальное кол-во пересечений K:\n");
		scanf("%d", &K);
		for (int i = 0; i < num; i++) {
			for (int j = 0; j < num; j++) {
				if (j != i)		//	Если номер текущего отрезка не равен самому себе
					cross += crossSegments(s, i, j);	//	Вызов ф-ии для проверки факта перечения и прибавление значения переменной cross
			}
			if (cross > K) {	//	Если кол-во пересечений больше заданного
				len = segmentLen(s, i);	//	Вызов ф-ции для вычисления длины отрезка и присванивание найденного значения переменной len
				if (maxlen < len) {		//	Если больший отрезок < длины текущего
					maxlen = len;	//	Больший отрезок = текущему
					maxcross = cross;	//	кол-во пересечений данного отрезка присваивается maxcross
					res = i;	//	Значению res присваивается номер найденного отрезка
				}
			}
			cross = 0;	//	Обнуление кол-ва пересечений отрезка для последущих итераций цикла
		}
		if (maxcross > 0) {		//	Если максимальное кол-во пересечений не равно 0
			printf("\n\n__________Найденный_отрезок:__________\n");
			printf("№:	Точка A(x, y):\t\tТочка B(x, y):\n");
			printf("%d   (%f | %f)\t(%f | %f)\n", res + 1, s[res].A[0], s[res].A[1], s[res].B[0], s[res].B[1]);
			printf("Длина отрезка = %f\nКол-во пересечений - %d\n\n\n", maxlen, maxcross);
		}
		else	//	Иначе
			printf("\n...ПЕРЕСЕЧЕНИЙ НЕ НАЙДЕНО...\n\n");
	}
	else	//	Иначе
		printf("\n...НЕДОСТАТОЧНОЕ КОЛ-ВО ОТРЕЗКОВ!...\n\n");
	return 0;	//	Завершение ф-ции
}

int search2(Segment* s, int num) {	//	Ф-ция для поиска
	if (num > 1) {	//	Если кол-во отрезков > 1
		float angle, G;
		int count, tag = 0;
		printf("Введите минимальный необходимый угол G:\n");
		scanf("%f", &G);
		printf("_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n");
		printf("№_Отрезка:\tКол-во отр.образующ.угол >= %.3f:\n", G);
		for (int i = 0; i < num; i++) {
			count = 0;	//	Обнуление кол-ва совпадений
			for (int j = 0; j < num; j++) {
				if (j != i) {	//	Если номер текущего отрезка не равен самому себе
					angle = segmentsAngle(s, i, j);	//	Вызов ф-ции для нахождения угла между отрезками и присваивание найденного значения переменной angle
					if (angle >= G) {	//	Если найденный угол больше или равен заданному
						count++;	//	Кол-во совпадений +1
						tag = 1;	//	Метка для проверки, что найден хотя бы один угол между отрезками
					}
				}
			}
			if (count > 0)	//	Если кол-во совпадений не равно 0
				printf("\t%d\t\t\t%d\n", i + 1, count);
		}
		if (!tag)	//	Если метка равна 0, вывод сообщения
			printf("...НЕ НАЙДЕНО...\n");
		printf("_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n");
	}
	else	//	Иначе, вывод сообщения
		printf("\n...НЕДОСТАТОЧНОЕ КОЛ-ВО ОТРЕЗКОВ!...\n\n");
	return 0;	//	Завершение ф-ции
}

int main() {	//	Главная ф-ция
	setlocale(LC_ALL, "rus");
	int N = 10;		//	Кол-во элементов структуры
	int num = 0, select;
	Segment* s;		//	Объявление структуры
	s = (Segment*)malloc(sizeof(Segment) * N);		//	Определение размера структуры
	do {
		printTable(s, num);
		printf("< 1 > - Добавить отрезок\n");
		printf("< 2 > - Удалить отрезок\n");
		printf("< 3 > - Поиск наиболее длинного отрезка, пересекающего более K отрезков\n");
		printf("< 4 > - Поиск для каждого отрезка кол-во отрезков, образующих с текущим угол не менее G градусов\n");
		printf("< 0 > - Выход\n");
		scanf("%d", &select);
		if (select == 1)
			inputSegment(s, N, &num);
		if (select == 2)
			delSegment(s, &num);
		if (select == 3)
			search1(s, num);
		if (select == 4)
			search2(s, num);
	} while (select != 0);
	return 0;	//	Завершение программы
}