#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <windows.h>	//	Подключение библиотек

typedef struct animals {	//	Структура animals
	char name[40];	//	Наименование животного
	int gender;		//	Пол
	int day, mouth, year;	//	Число, месяц, год рождения
	int diet;	//	Калорийность ежедневного рациона
	int room;	//	Необходимость содержания в помещении в зимнее время
 } animals;

int errMess() {		//	Ф-ция для вывода текстового сообщения об ошибке
	printf("| ! ! ! Некорректное значение... ! ! ! |\n\n");
	return 0;
}

int datePrintf(int day, int mouth, int year) {	//	Ф-ция для печати в формате даты
	if (day < 10)
		printf("0%d.", day);
	else
		printf("%d.", day);
	if (mouth < 10)
		printf("0%d.", mouth);
	else
		printf("%d.", mouth);
	printf("%d", year);
	return 0;
}

int addAnimal(animals* a, int* num, int N) {	//	Ф-ция для добавления животных в список
	if (*num < N) {
		printf("Название: ");
		scanf("%s", a[*num].name);	//	Ввод наименования животного
		printf("\n| + + + + + Добавлено + + + + + |\n\n");
		while (1) {		//	Ввод пола
			printf("| 1 - Самец | 2 - Самка | >> ");
			scanf("%d", &a[*num].gender);
			if (a[*num].gender == 1 || a[*num].gender == 2)
				break;
			else
				errMess();
		}
		printf("\n| + + + + + Добавлено + + + + + |\n\n");
		printf("Дата рождения:\n");
		while (1) {		//	Ввод даты рождения
			printf("Число: ");
			scanf("%d", &a[*num].day);
			if (a[*num].day >= 1 && a[*num].day <= 31)
				break;
			else
				errMess();
		}
		while (1) {
			printf("Месяц: ");
			scanf("%d", &a[*num].mouth);
			if (a[*num].mouth >= 1 && a[*num].mouth <= 12)
				break;
			else
				errMess();
		}
		while (1) {
			printf("Год: ");
			scanf("%d", &a[*num].year);
			if (a[*num].year >= 2000 && a[*num].year <= 2023)
				break;
			else
				errMess();
		}
		printf("\n| + + + + + Добавлено + + + + + |\n\n");
		while (1) {		//	Ввод калорийности ежедневного рациона
			printf("Калорийность ежедневного рациона (кал.): ");
			scanf("%d", &a[*num].diet);
			if (a[*num].diet > 0)
				break;
			else
				errMess();
		}
		printf("\n| + + + + + Добавлено + + + + + |\n\n");
		while (1) {		//	Ввод переселения на зиму в теплое помещение
			printf("Переселение на зиму в теплое помещение:\n");
			printf("| 1 - Требуется | 0 - Не требуется | >> ");
			scanf("%d", &a[*num].room);
			if (a[*num].room == 0 || a[*num].room == 1)
				break;
			else
				errMess();
		}
		printf("\n| + + + + + Добавлено + + + + + |\n\n");
		*num += 1;	//	Добавление номера элемента структуры для следущей записи
	}
	return 0;
}

int output(animals* a, int num, int i) {	//	Ф-ция для вывода строки с информацией о животных
	printf("%d    %s\t", i + 1, a[i].name);	//	Ввод наименования животного
	if (a[i].gender == 1)	//	Если gender = 1, вывод: "Самец"
		printf("Самец\t  ");
	if (a[i].gender == 2)	//	Еcли gender = 2, вывод: "Самка"
		printf("Самка\t  ");
	datePrintf(a[i].day, a[i].mouth, a[i].year);	//	Вызов ф-ции для вывода даты в формате xx.xx.xxxx 
	printf("\t    %d\t", a[i].diet);	//	Ввод калорийности рациона
	if (a[i].room) //	Если room = 1, вывод: "Требуется"
		printf("Требуется");
	else		//	Иначе, вывод: "Не требуется"
		printf("Не требуется");	
	printf("\n");
	return 0;
}

int printTable(animals* a, int num) {	//	Ф-ция для вывода таблицы
	printf("\n№  Название:\tПол:\tДата рождения:\tРацион(кал.):\tТепл.помещ.:\n");
	for (int i = 0; i < num; i++) {
		output(a, num, i);	//	Вызов ф-ции для вывода строки с информацией
	}
	printf("\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n");
	return 0;
}

int deleteAnimal(animals* a, int* num) {	//	Ф-ция для удаления строк 
	int num_del;
	printf("| * * * * * Удаление * * * * * |\n");
	while (1) {
		printf("Номер строки для удаления:\n");
		printf("| 0 - отмена | >> ");
		scanf("%d", &num_del);		//	Ввод номера строки для удаления
		printf("\n");
		if (num_del == 0)	//	Если номер строки равен 0
			return 0;	//	Выход из ф-ции для удаления
		if (*num > 0) {
			if (num_del > 0 && num_del <= *num) {
				*num -= 1;	//	Уменьшение номера элемента структуры
				for (int i = num_del - 1; i < *num; i++)
					a[i] = a[i + 1];
				printf("| - - - - - Удалено - - - - - |\n\n");
				break;
			}
			else
				errMess();	//	Вызов вывода ошибки
		}
		else
			errMess();	//	Вызов вывода ошибки
	}
	return 0;
}

int search1(animals* a, int num) {	//	Ф-ция для поиска самого молодого животного по наименованию
	char sname[40];	//	переменная поиск_животного
	int flag = 0, max, j = 0;
	printf("\n| * * * * * * Поиск * * * * * * |\n");
	printf("Наименование вида: ");
	scanf("%s", &sname);	//	Ввод наименования для поиска
	for (int i = 0; i < num; i++) {
		if (!strcmp(a[i].name, sname)) {	//	Если наименование животного = наименование поиск_животного
			if (flag == 0) {	//	Если flag = 0
				max = a[i].year * 365 + (a[i].mouth - 1) * 30 + a[i].day;	//	max присваивается дата первого совпадения
				j = i;	//	j - присваивает номер строки, в которой было найдено совпадение
				flag++; //	flag - становится больше 0, и при следующем проходе цикла, этот блок ветвления не сработает
			}
			else {
				if (a[i].year * 365 + (a[i].mouth - 1) * 30 + a[i].day > max) {	//	Если дата рождения следущего животного больше, чем max
					max = a[i].year * 365 + (a[i].mouth - 1) * 30 + a[i].day;	//	Тогда max присваивается эта дата
					j = i;	//	j - присваивает номер строки, в которой значение max было больше
				}
			}
		}
	}
	printf("\n№  Название:\tПол:\tДата рождения:\tРацион(кал.):\tТепл.помещ.:\n");	//	Вывод результата поиска
	if (!strcmp(a[j].name, sname)) {
		output(a, num, j);	//	Вызов ф-ции для вывода строки информации
	}
	printf("\n");
	return 0;
}

int search2(animals* a, int num) {	//	Ф-ция для поиска 3х животных с минимальным необходимой калорийностью по заданному полу
	int count = 0, flag = 0, j = 0, remove = 0;
	int sgen, min_diet, min, * i_max;
	printf("\n| * * * * * * Поиск * * * * * * |\n");
	while (1) {		//	Ввод пола
		printf("Введите пол:\n| 1 - Самец | 2 - Самка | >> ");
		scanf("%d", &sgen);
		if (sgen == 1 || sgen == 2)
			break;
		else
			errMess();
	}
	while (1) {	//	Ввод минимальной калорийности
		printf("Необходимая минимальная калорийность (кал.): ");
		scanf("%d", &min_diet);
		if (min_diet > 0)
			break;
		else
			errMess();
	}
	for (int i = 0; i < num; i++) {
		if (a[i].diet >= min_diet && a[i].gender == sgen && a[i].room)	//	Нахождение количества совпадений, если их меньше 3х, для определения размера массива
			count++;
		if (count == 3)	//	Если счётчик > 3, то выход из цикла
			break;
	}
	i_max = (int*)malloc(sizeof(int) * count);		//	Определение размера массива i_max, при помощи найденных совпадений count в структуре
	for (int k = 0; k < count; k++) {	//	Цикл по количеству найденных совпадений count
		for (int i = 0; i < num; i++) {		//	Цикл, пока i меньше количества добавленных строк массива
			//	Если diet больше или равен минимальной заданной границе рациона, и gender равен заданному полу, и room равно 1(переселение требуется)
			if (a[i].diet >= min_diet && a[i].gender == sgen && a[i].room) {
				for (int m = 0; m <= j; m++) {	// Цикл пока m меньше, либо равно j - количество найденных номеров, в массиве i_max
					if (i == i_max[m]) {	//	Если номер строки равен номеру элем. из массива
						remove++;	//	remove не равен 0, и вновь найденное значение уже не учитывается
					}
				}
				if (remove == 0) {	//	Если же номер строки не совпал с найденным номером в массиве i_max
					if (flag == 0) {	//	Если flag = 0
						min = a[i].diet;	//	min присваивается значение калорийности рациона
						i_max[j] = i;	//	j-ому элементу массива присваивается значение номера элемента структуры с совпадением
						flag++;	//	flag - становится больше 0, и при следующем проходе цикла, этот блок ветвления не сработает до конца этотго цикла
					}
					else {	//	Если flag не равен 0, то есть это не певая итерация цикла
						if (a[i].diet < min) {	//	Если diet меньше, чем минимальный рацион - min
							min = a[i].diet;	//	min присваивается значение меньшего значения
							i_max[j] = i;	//	j-ому элементу массива присваивается значение номера элемента структуры с совпадением
						}
					}
				}
				remove = 0;	//	Обнуление триггера на выборку повторяющихся строк с минимальной калорийностью
			}
		}
		flag = 0;	//	Обнуление триггера на присваивание значения min, при первом проходе цикла
		j++;	//	Увеличение на 1, текущего номера элемента в массиве i_max
	}
	printf("\n№\tНазвание:\tПол:\tДата рождения:\tРацион(кал.):\tТепл.помещ.:\n");
	for (int i = 0; i < count; i++) {
		output(a, num, i_max[i]);	//	Вызов ф-ции для вывода строки, где в массиве i_max[i], сохранены номера подходящих строк
	}
	printf("\n");
	free(i_max);	//	Освобождение памяти выделенной под массив i_max
	return 0;
}

int main() {	//	Главная ф-ция
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);		//	Смена кодировки, подключение кириллицы
	int N = 10, num = 0, select;	//	N - можно задать больше вручную, num - номер элемента структуры, select - переменная выбора
	printf("N = %d\n", N);	//	N - максимальный размер массива структуры
	animals* a;	//	Объявление структуры animals
	a = (animals*)malloc(sizeof(animals) * N);	//	Определение размера массива структуры
	do {
		printf("| * * * * * * * ЗООПАРК * * * * * * * |\n");
		printf("< 1 > - Добавить животное в список\n");
		printf("< 2 > - Вывести список животных\n");
		printf("< 3 > - Удалить из списка\n");
		printf("< 4 > - Поиск самого молодого животного по наименованию вида\n");
		printf("< 5 > - Поиск 3-х животных одного пола с наим. необходимой калориностью рациона, требующих переселения на зиму\n");
		printf("< 0 > - Выйти\n>> ");
		scanf("%d", &select);	//	Выбор действий
		if (select == 1)
			addAnimal(a, &num, N);	//	Вызов ф-ции для добавления животного
		else if (select == 2)
			printTable(a, num);		//	Вызов ф-ции для вывода таблицы
		else if (select == 3)
			deleteAnimal(a, &num);	//	Вызов ф-ции для удаления строки
		else if (select == 4)
			search1(a, num);	//	Вызов ф-ции для поиска самого молодого животного по заданному виду
		else if (select == 5)
			search2(a, num);	//Вызов ф-ции для поиска 3х животных с минимальной необходимой калорийностью по заданному полу
		else {
			if (select != 0)	//	Если выбор не равен 0, то
				errMess();	//	Вызов ф-ции для вывода сообщения об ошибке
		}
	} while (select != 0);
	return 0;	//	Конец программы
}