#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <windows.h>	//	Подключение библиотек

int compareBase(int i, char* text, char* letters, int* count) {		//	Ф-ция для выделения слова из текста
	char symbl[] = { "`~!@\"#№$;%^:&?*()-_=+[]{};:',<.>/|\\" };		//	Символы, которые не добавляются в слова
	int m = 0, flag, end;
	*count = 0;	//	Обнуление счётчика
	while(1) {
		flag = 0;	//	Обнуление метки
		if (text[i] == ' ' || i == strlen(text) - 1) {	//	если эл. строки равен пробелу или номер эл. равен размеру текстовой строки
			end = i;	//	присваивание значения последнего эл-та
			break;	//	Выход из цикла
		}
		else {	//	Иначе
			for (int j = 0; j < strlen(symbl); j++) {	//	Цикл для проверки наличия символа не включаемого в слово
				if (text[i] == symbl[j])	//	Если номер эл-та равен символу из списка
					flag = 1;	//	Срабатывет метка flag = 1 для перехода на следущий эл. не равный символу строки
			}
			if (!flag) {	//	Если метка flag = 0
				letters[m] = text[i];	//	в строку letters записывается эл. текстовой строки
				*count += 1;	//	счётчик +1
				m++;	//	прибавление номера элемента для записи
			}
			++i;	//	прибавление эл-та для прохода по текстовой строке
		}
	}
	letters[m] = '\0';	//	К последнему эл-ту найденной строки присвается знак конца строки '\0'
	return end;	//	Ф-ция возвращает номер элемента конца найденного слова 
}

int anagrammSearch(char* letters, char* compare) {	//	Ф-ция для сравнения двух найденных слов
	if (strlen(letters) == strlen(compare)) {	//	Если длина строки 1-го слова = длина строки 2-го слова, выполняется далее...
		char new_compare[33];	//	Объявление новой строки для копирования в неё compare
		int count = 0;	//	Счётчик совпадений
		strcpy(new_compare, compare);	//	Копирование строки compare в строку new_compare
		for (int i = 0; i < strlen(letters); i++) {		//	Цикл до конца 1-й строки
			for (int j = 0; j < strlen(new_compare); j++) {	//	Цикл до конца 2-й строки
				if (letters[i] == new_compare[j]) {	//	Если эл. 1-й строки = эл. 2-й строки
					count++;	//	прибавление счётчика совпадений
					for (int k = j; k < strlen(new_compare); k++) {	//	Цикл удаления совпавших эл.
						new_compare[k] = new_compare[k + 1];
					}
				}
			}
		}
		if (count == strlen(letters))	//	Если кол-во совпадений = длине строки
			return 1;	//	Ф-ция завершается и возвращает 1
		else	//	Иначе
			return 0;	// Завершение и возврат 0
	}
	else	//	Иначе, если длина строк различается, ф-ция завершается и возвращает 0 
		return 0;
}

int wordDel(char* text, int* end, int count) {	//	Ф-ция удаления слова из строки поиска
	for (int i = 0; i < count + 1; i++) {	//	цикл по кол-ву эл. строки
		for (int j = *end - i; j < strlen(text); j++)	//	цикл для удаления, начиная с эл-та конца слова в тексте
			text[j] = text[j + 1];	//	поочередное смещение строки до последнего эл-та
	}
	*end -= count;	//	сдвиг номера последнего эл-та слова
	return 0;	//	Завершение ф-ции
}

int Anagramm(char* text) {	//	Ф-ция для поиска анаграмм
	char new_text[512];		//	объявление строки для поиска
	char letters[33], compare[33];		//	Объявление 1-й и 2-й строки для записи сравниваемых слов
	int count = 0, end, flag;	//	Счётчик | номер эл-та конца 1-го слова | метка
	strcpy(new_text, text);		//	Копирование тестовой строки в строку для поиска
	printf("\nНайденные анаграммы:\n");
	while (new_text[0] != '\0') {	//	цикл пока 0-ой эл. текстовой строки не равен концу строки
		end = compareBase(0, new_text, letters, &count);	//	вызов ф-ции для нахождения 1-го слова в тексте и присваивание значения ф-ции переменной end
		wordDel(new_text, &end, count);		//	Удаление 1-го слова из текста для поиска
		int end1 = end - 1;	//	Объявление номера эл-та конца 2-го слова и присваивание значения 1-го - 1
		flag = 0;	//	Обнуление метки
		while (new_text[end1 + 1] != '\0') {	//	цикл пока номер эл. конца 2-го слова +1 текстовой строки для поиска не равен концу строки
			count = 0;	//	Обнуление счётчика
			end1 = compareBase(end1 + 1, new_text, compare, &count);	//	вызов ф-ции для нахождения 2-го слова в тексте и присваивание значения ф-ции переменной end1
			if (anagrammSearch(letters, compare)) {		//	Если найденные слова - анаграммы
				if (!flag) {	//	Если метка = 0
					puts(letters);	//	Вывод 1-го слова
					flag = 1;	//	метка = 1
				}
				puts(compare);	//	Вывод 2-го слова
				wordDel(new_text, &end1, count);	//	Вызов ф-ции для удаления 2-го слова из текста для поиска
				end1 = -1;	//	присваивание значения -1 номеру эл-та конца 2-го слова
			}
		}
		printf("\n");	//	Переход на новую строку
	}
	return 0;	//	Завершение ф-ции
}

int main() {	//	Главная ф-ция
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);	//	Смена кодировки символов
	char text[512];	//	Объявление текстовой строки для ввода
	printf("Введите текст:\n");
	fgets(text, 512, stdin);	//	Ввод  строки
	Anagramm(text);	//	Вызов ф-ции для поиска анаграмм
	return 0;	//	Завершение программы
}