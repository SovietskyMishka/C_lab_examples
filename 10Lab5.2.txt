/********************************************
* Файл: lab3.c								*
* Лаб. работа: №5							*
* Задача: 10.1								*
* Автор: Исоев Мехриддин					*
* Группа: 8.209-1							*
********************************************/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <locale.h>		//	Подключение библиотек

void matrix_vivod(int** a, int N) {		//		Ф-ция для вывода
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			printf("%4.d ", a[i][j]);
			if (j == N - 1)		//	Если элемент столбца равен размеру массива, перенос на новую строку
				printf("\n");
		}
	}
}

void zigzag(int** a, int N) {	//	Функция для заполнения 	
	int count = 1, num = 1, flag = 0;
	a[0][0] = num;		//	присваиваение нулевому элем. первого значения
	num++;	//	увеличение числа
	while (count != N) {	//	Цикл, пока count не равен размеру массива на увеличение размера диагонали
		if (!flag) {	//	Если flag равен 0, выполняется цикл заполнения влево
			for (int i = count, j = 0; i >= 0; i--, j++) {	//	цикл где i каждый раз отнимается от count до 0, а j прибавляется от 0 до count
				a[j][i] = num;	//	Присваивание числа элементу массива на диагонали
				num++;	//	увеличение числа
			}
			flag = 1;	//	метка для чередования способов заполнения = 1
		}
		else {	//	Если flag равен 1, выполняется цикл заполнения вправо
			for (int i = count, j = 0; i >= 0; i--, j++) {	//	цикл где i каждый раз отнимается от count до 0, а j прибавляется от 0 до count
				a[i][j] = num;	//	Присваивание числа элементу массива на диагонали
				num++;	//	увеличение числа
			}
			flag = 0;	//	Обнумеление метки для чередования способов заполнения
		}
		count++;	//	Увеличение счётчика кол-ва элем. до конца диагонали
	}
	count = 1;	//	счётчик = 1
	while (count != N) {	//	Цикл, пока count не равен размеру массива на уменьшение размера диагонали
		if (flag) {	//	Если flag равен 1, выполняется цикл заполнения вправо
			for (int i = N - 1, j = count; i >= count; i--, j++) {	//	цикл где i каждый раз отнимается от count до 0, а j прибавляется от 0 до count
				a[i][j] = num;	//	Присваивание числа элементу массива на диагонали
				num++; //	увеличение числа
			}
			flag = 0; //	Обнумеление метки для чередования способов заполнения
		}
		else {
			for (int i = N - 1, j = count; i >= count; i--, j++) {	//	цикл где i каждый раз отнимается от count до 0, а j прибавляется от 0 до count
				a[j][i] = num;	//	Присваивание числа элементу массива на диагонали
				num++;	//	увеличение числа
			}
			flag = 1;	//	метка для чередования способов заполнения = 1
		}
		count++;	//	Увеличение счётчика кол-ва элем. до конца диагонали
	}
}

void main() {
	setlocale(LC_ALL, "rus");	//	Подключение кириллицы в консоли
	int N, ** A;	//	N - размер массива

	srand(time(NULL));	//	Сброс базы для генерации чисел

	printf("Введите кол-во элементов в массиве A:\n");
	scanf("%d", &N);	//	Ввод кол-ва элементов массива

	A = (int**)malloc(N * sizeof(int*));
	for (int i = 0; i < N; i++)
		A[i] = (int*)malloc(N * sizeof(int)); //	Определение размера двумерного массива

	zigzag(A, N);	//	Вызов ф-ции для заполнения массива A зигзагом
	matrix_vivod(A, N);		//	Вызов ф-ции для вывода двумерного массива в виде матрицы N x N
	getchar(); getchar();	//	Конец программы
}